import { ClientsArray } from './ClientsArray';
import { ClientsAutoArray } from './ClientsAutoArray';

// This file was autogenerated. Please do not change.
// All changes will be overwrited on commit.
export interface IClients {
    auto_clients?: ClientsAutoArray;
    clients?: ClientsArray;
}

export default class Clients {
    readonly _auto_clients: ClientsAutoArray | undefined;

    get autoClients(): ClientsAutoArray | undefined {
        return this._auto_clients;
    }

    readonly _clients: ClientsArray | undefined;

    get clients(): ClientsArray | undefined {
        return this._clients;
    }

    constructor(props: IClients) {
        if (props.auto_clients) {
            this._auto_clients = props.auto_clients;
        }
        if (props.clients) {
            this._clients = props.clients;
        }
    }

    serialize(): IClients {
        const data: IClients = {
        };
        if (typeof this._auto_clients !== 'undefined') {
            data.auto_clients = this._auto_clients;
        }
        if (typeof this._clients !== 'undefined') {
            data.clients = this._clients;
        }
        return data;
    }

    validate(): string[] {
        const validateRequired = {
        };
        const isError: string[] = [];
        Object.keys(validateRequired).forEach((key) => {
            if (!(validateRequired as any)[key]) {
                isError.push(key);
            }
        });
        return isError;
    }

    update(props: IClients): Clients {
        return new Clients(props);
    }

    readonly keys: { [key: string]: string } = {
        autoClients: 'auto_clients',
        clients: 'clients',
        }
;

    mergeDeepWith(props: Partial<Clients>): Clients {
        const updateData: Partial<IClients> = {};
        Object.keys(props).forEach((key: keyof Clients) => {
            const updateKey = this.keys[key] as keyof IClients;
            if ((props[key] as any).serialize) {
                (updateData[updateKey] as any) = (props[key] as any).serialize() as Pick<IClients, keyof IClients>;
            } else {
                (updateData[updateKey] as any) = props[key];
            }
        });
        return new Clients({ ...this.serialize(), ...updateData });
    }
}
