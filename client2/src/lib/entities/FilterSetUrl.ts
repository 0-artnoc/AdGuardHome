// This file was autogenerated. Please do not change.
// All changes will be overwrited on commit.
export interface IFilterSetUrl {
    enabled?: boolean;
    url?: string;
}

export default class FilterSetUrl {
    readonly _enabled: boolean | undefined;

    get enabled(): boolean | undefined {
        return this._enabled;
    }

    readonly _url: string | undefined;

    get url(): string | undefined {
        return this._url;
    }

    constructor(props: IFilterSetUrl) {
        if (typeof props.enabled === 'boolean') {
            this._enabled = props.enabled;
        }
        if (typeof props.url === 'string') {
            this._url = props.url.trim();
        }
    }

    serialize(): IFilterSetUrl {
        const data: IFilterSetUrl = {
        };
        if (typeof this._enabled !== 'undefined') {
            data.enabled = this._enabled;
        }
        if (typeof this._url !== 'undefined') {
            data.url = this._url;
        }
        return data;
    }

    validate(): string[] {
        const validateRequired = {
            url: !this._url ? true : typeof this._url === 'string' && !this._url ? true : this._url,
            enabled: !this._enabled ? true : typeof this._enabled === 'boolean',
        };
        const isError: string[] = [];
        Object.keys(validateRequired).forEach((key) => {
            if (!(validateRequired as any)[key]) {
                isError.push(key);
            }
        });
        return isError;
    }

    update(props: IFilterSetUrl): FilterSetUrl {
        return new FilterSetUrl(props);
    }

    readonly keys: { [key: string]: string } = {
        enabled: 'enabled',
        url: 'url',
        }
;

    mergeDeepWith(props: Partial<FilterSetUrl>): FilterSetUrl {
        const updateData: Partial<IFilterSetUrl> = {};
        Object.keys(props).forEach((key: keyof FilterSetUrl) => {
            const updateKey = this.keys[key] as keyof IFilterSetUrl;
            if ((props[key] as any).serialize) {
                (updateData[updateKey] as any) = (props[key] as any).serialize() as Pick<IFilterSetUrl, keyof IFilterSetUrl>;
            } else {
                (updateData[updateKey] as any) = props[key];
            }
        });
        return new FilterSetUrl({ ...this.serialize(), ...updateData });
    }
}
