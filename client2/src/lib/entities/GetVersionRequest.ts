// This file was autogenerated. Please do not change.
// All changes will be overwrited on commit.
export interface IGetVersionRequest {
    recheck_now?: boolean;
}

export default class GetVersionRequest {
    readonly _recheck_now: boolean | undefined;

    /** */
    get recheckNow(): boolean | undefined {
        return this._recheck_now;
    }

    constructor(props: IGetVersionRequest) {
        if (typeof props.recheck_now === 'boolean') {
            this._recheck_now = props.recheck_now;
        }
    }

    serialize(): IGetVersionRequest {
        const data: IGetVersionRequest = {
        };
        if (typeof this._recheck_now !== 'undefined') {
            data.recheck_now = this._recheck_now;
        }
        return data;
    }

    validate(): string[] {
        const validateRequired = {
            recheck_now: !this._recheck_now ? true : typeof this._recheck_now === 'boolean',
        };
        const isError: string[] = [];
        Object.keys(validateRequired).forEach((key) => {
            if (!(validateRequired as any)[key]) {
                isError.push(key);
            }
        });
        return isError;
    }

    update(props: IGetVersionRequest): GetVersionRequest {
        return new GetVersionRequest(props);
    }

    readonly keys: { [key: string]: string } = {
        recheckNow: 'recheck_now',
        }
;

    mergeDeepWith(props: Partial<GetVersionRequest>): GetVersionRequest {
        const updateData: Partial<IGetVersionRequest> = {};
        Object.keys(props).forEach((key: keyof GetVersionRequest) => {
            const updateKey = this.keys[key] as keyof IGetVersionRequest;
            if ((props[key] as any).serialize) {
                (updateData[updateKey] as any) = (props[key] as any).serialize() as Pick<IGetVersionRequest, keyof IGetVersionRequest>;
            } else {
                (updateData[updateKey] as any) = props[key];
            }
        });
        return new GetVersionRequest({ ...this.serialize(), ...updateData });
    }
}
