import CheckConfigResponseInfo, { ICheckConfigResponseInfo } from './CheckConfigResponseInfo';
import CheckConfigStaticIpInfo, { ICheckConfigStaticIpInfo } from './CheckConfigStaticIpInfo';

// This file was autogenerated. Please do not change.
// All changes will be overwrited on commit.
export interface ICheckConfigResponse {
    dns?: ICheckConfigResponseInfo;
    static_ip?: ICheckConfigStaticIpInfo;
    web?: ICheckConfigResponseInfo;
}

export default class CheckConfigResponse {
    readonly _dns: CheckConfigResponseInfo | undefined;

    get dns(): CheckConfigResponseInfo | undefined {
        return this._dns;
    }

    readonly _static_ip: CheckConfigStaticIpInfo | undefined;

    get staticIp(): CheckConfigStaticIpInfo | undefined {
        return this._static_ip;
    }

    readonly _web: CheckConfigResponseInfo | undefined;

    get web(): CheckConfigResponseInfo | undefined {
        return this._web;
    }

    constructor(props: ICheckConfigResponse) {
        if (props.dns) {
            this._dns = new CheckConfigResponseInfo(props.dns);
        }
        if (props.static_ip) {
            this._static_ip = new CheckConfigStaticIpInfo(props.static_ip);
        }
        if (props.web) {
            this._web = new CheckConfigResponseInfo(props.web);
        }
    }

    serialize(): ICheckConfigResponse {
        const data: ICheckConfigResponse = {
        };
        if (typeof this._dns !== 'undefined') {
            data.dns = this._dns.serialize();
        }
        if (typeof this._static_ip !== 'undefined') {
            data.static_ip = this._static_ip.serialize();
        }
        if (typeof this._web !== 'undefined') {
            data.web = this._web.serialize();
        }
        return data;
    }

    validate(): string[] {
        const validateRequired = {
            dns: !this._dns ? true : this._dns.validate().length === 0,
            web: !this._web ? true : this._web.validate().length === 0,
            static_ip: !this._static_ip ? true : this._static_ip.validate().length === 0,
        };
        const isError: string[] = [];
        Object.keys(validateRequired).forEach((key) => {
            if (!(validateRequired as any)[key]) {
                isError.push(key);
            }
        });
        return isError;
    }

    update(props: ICheckConfigResponse): CheckConfigResponse {
        return new CheckConfigResponse(props);
    }

    readonly keys: { [key: string]: string } = {
        dns: 'dns',
        staticIp: 'static_ip',
        web: 'web',
        }
;

    mergeDeepWith(props: Partial<CheckConfigResponse>): CheckConfigResponse {
        const updateData: Partial<ICheckConfigResponse> = {};
        Object.keys(props).forEach((key: keyof CheckConfigResponse) => {
            const updateKey = this.keys[key] as keyof ICheckConfigResponse;
            if ((props[key] as any).serialize) {
                (updateData[updateKey] as any) = (props[key] as any).serialize() as Pick<ICheckConfigResponse, keyof ICheckConfigResponse>;
            } else {
                (updateData[updateKey] as any) = props[key];
            }
        });
        return new CheckConfigResponse({ ...this.serialize(), ...updateData });
    }
}
