// This file was autogenerated. Please do not change.
// All changes will be overwrited on commit.
export interface IRemoveUrlRequest {
    url?: string;
}

export default class RemoveUrlRequest {
    readonly _url: string | undefined;

    /**
     * Description: Previously added URL containing filtering rules
     * Example: https://filters.adtidy.org/windows/filters/15.txt
     */
    get url(): string | undefined {
        return this._url;
    }

    constructor(props: IRemoveUrlRequest) {
        if (typeof props.url === 'string') {
            this._url = props.url.trim();
        }
    }

    serialize(): IRemoveUrlRequest {
        const data: IRemoveUrlRequest = {
        };
        if (typeof this._url !== 'undefined') {
            data.url = this._url;
        }
        return data;
    }

    validate(): string[] {
        const validateRequired = {
            url: !this._url ? true : typeof this._url === 'string' && !this._url ? true : this._url,
        };
        const isError: string[] = [];
        Object.keys(validateRequired).forEach((key) => {
            if (!(validateRequired as any)[key]) {
                isError.push(key);
            }
        });
        return isError;
    }

    update(props: IRemoveUrlRequest): RemoveUrlRequest {
        return new RemoveUrlRequest(props);
    }

    readonly keys: { [key: string]: string } = {
        url: 'url',
        }
;

    mergeDeepWith(props: Partial<RemoveUrlRequest>): RemoveUrlRequest {
        const updateData: Partial<IRemoveUrlRequest> = {};
        Object.keys(props).forEach((key: keyof RemoveUrlRequest) => {
            const updateKey = this.keys[key] as keyof IRemoveUrlRequest;
            if ((props[key] as any).serialize) {
                (updateData[updateKey] as any) = (props[key] as any).serialize() as Pick<IRemoveUrlRequest, keyof IRemoveUrlRequest>;
            } else {
                (updateData[updateKey] as any) = props[key];
            }
        });
        return new RemoveUrlRequest({ ...this.serialize(), ...updateData });
    }
}
