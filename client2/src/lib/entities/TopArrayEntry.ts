// This file was autogenerated. Please do not change.
// All changes will be overwrited on commit.
export interface ITopArrayEntry {
    domain_or_ip?: number;
}

export default class TopArrayEntry {
    readonly _domain_or_ip: number | undefined;

    get domainOrIp(): number | undefined {
        return this._domain_or_ip;
    }

    constructor(props: ITopArrayEntry) {
        if (typeof props.domain_or_ip === 'number') {
            this._domain_or_ip = props.domain_or_ip;
        }
    }

    serialize(): ITopArrayEntry {
        const data: ITopArrayEntry = {
        };
        if (typeof this._domain_or_ip !== 'undefined') {
            data.domain_or_ip = this._domain_or_ip;
        }
        return data;
    }

    validate(): string[] {
        const validateRequired = {
            domain_or_ip: !this._domain_or_ip ? true : typeof this._domain_or_ip === 'number',
        };
        const isError: string[] = [];
        Object.keys(validateRequired).forEach((key) => {
            if (!(validateRequired as any)[key]) {
                isError.push(key);
            }
        });
        return isError;
    }

    update(props: ITopArrayEntry): TopArrayEntry {
        return new TopArrayEntry(props);
    }

    readonly keys: { [key: string]: string } = {
        domainOrIp: 'domain_or_ip',
        }
;

    mergeDeepWith(props: Partial<TopArrayEntry>): TopArrayEntry {
        const updateData: Partial<ITopArrayEntry> = {};
        Object.keys(props).forEach((key: keyof TopArrayEntry) => {
            const updateKey = this.keys[key] as keyof ITopArrayEntry;
            if ((props[key] as any).serialize) {
                (updateData[updateKey] as any) = (props[key] as any).serialize() as Pick<ITopArrayEntry, keyof ITopArrayEntry>;
            } else {
                (updateData[updateKey] as any) = props[key];
            }
        });
        return new TopArrayEntry({ ...this.serialize(), ...updateData });
    }
}
