import NetInterface, { INetInterface } from './NetInterface';

// This file was autogenerated. Please do not change.
// All changes will be overwrited on commit.
export interface IAddressesInfo {
    dns_port?: number;
    interfaces?: { [key: string]: INetInterface };
    web_port?: number;
}

export default class AddressesInfo {
    readonly _dns_port: number | undefined;

    /**
     * Description: undefined
     * Example: 53
     */
    get dnsPort(): number | undefined {
        return this._dns_port;
    }

    readonly _interfaces: { [key: string]: NetInterface | undefined };

    /** */
    get interfaces(): { [key: string]: NetInterface | undefined } {
        return this._interfaces;
    }

    readonly _web_port: number | undefined;

    /**
     * Description: undefined
     * Example: 80
     */
    get webPort(): number | undefined {
        return this._web_port;
    }

    constructor(props: IAddressesInfo) {
        if (typeof props.dns_port === 'number') {
            this._dns_port = props.dns_port;
        }
        if (props.interfaces) {
            this._interfaces = Object.keys(props.interfaces).reduce((prev, key) => {
                                    return { ...prev, [key]: new NetInterface(props.interfaces[key])};
                                },{})
        }
        if (typeof props.web_port === 'number') {
            this._web_port = props.web_port;
        }
    }

    serialize(): IAddressesInfo {
        const data: IAddressesInfo = {
        };
        if (typeof this._dns_port !== 'undefined') {
            data.dns_port = this._dns_port;
        }
        if (typeof this._interfaces !== 'undefined') {
            data.interfaces = Object.keys(this._interfaces).reduce((prev, key) => ({ ...prev, [key]: this._interfaces[key].serialize() }), {});
        }
        if (typeof this._web_port !== 'undefined') {
            data.web_port = this._web_port;
        }
        return data;
    }

    validate(): string[] {
        const validate = {
            dns_port: !this._dns_port ? true : typeof this._dns_port === 'number',
            web_port: !this._web_port ? true : typeof this._web_port === 'number',
        };
        const isError: string[] = [];
        Object.keys(validate).forEach((key) => {
            if (!(validate as any)[key]) {
                isError.push(key);
            }
        });
        return isError;
    }

    update(props: IAddressesInfo): AddressesInfo {
        return new AddressesInfo(props);
    }
}
