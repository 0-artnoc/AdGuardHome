// This file was autogenerated. Please do not change.
// All changes will be overwrited on commit.
export interface IFilterRefreshRequest {
    whitelist?: boolean;
}

export default class FilterRefreshRequest {
    readonly _whitelist: boolean | undefined;

    get whitelist(): boolean | undefined {
        return this._whitelist;
    }

    constructor(props: IFilterRefreshRequest) {
        if (typeof props.whitelist === 'boolean') {
            this._whitelist = props.whitelist;
        }
    }

    serialize(): IFilterRefreshRequest {
        const data: IFilterRefreshRequest = {
        };
        if (typeof this._whitelist !== 'undefined') {
            data.whitelist = this._whitelist;
        }
        return data;
    }

    validate(): string[] {
        const validateRequired = {
            whitelist: !this._whitelist ? true : typeof this._whitelist === 'boolean',
        };
        const isError: string[] = [];
        Object.keys(validateRequired).forEach((key) => {
            if (!(validateRequired as any)[key]) {
                isError.push(key);
            }
        });
        return isError;
    }

    update(props: IFilterRefreshRequest): FilterRefreshRequest {
        return new FilterRefreshRequest(props);
    }

    readonly keys: { [key: string]: string } = {
        whitelist: 'whitelist',
        }
;

    mergeDeepWith(props: Partial<FilterRefreshRequest>): FilterRefreshRequest {
        const updateData: Partial<IFilterRefreshRequest> = {};
        Object.keys(props).forEach((key: keyof FilterRefreshRequest) => {
            const updateKey = this.keys[key] as keyof IFilterRefreshRequest;
            if ((props[key] as any).serialize) {
                (updateData[updateKey] as any) = (props[key] as any).serialize() as Pick<IFilterRefreshRequest, keyof IFilterRefreshRequest>;
            } else {
                (updateData[updateKey] as any) = props[key];
            }
        });
        return new FilterRefreshRequest({ ...this.serialize(), ...updateData });
    }
}
