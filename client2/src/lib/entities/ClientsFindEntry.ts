// This file was autogenerated. Please do not change.
// All changes will be overwrited on commit.
export interface IClientsFindEntry {
}

export default class ClientsFindEntry {
    constructor(props: IClientsFindEntry) {
    }

    serialize(): IClientsFindEntry {
        const data: IClientsFindEntry = {
        };
        return data;
    }

    validate(): string[] {
        const validateRequired = {
        };
        const isError: string[] = [];
        Object.keys(validateRequired).forEach((key) => {
            if (!(validateRequired as any)[key]) {
                isError.push(key);
            }
        });
        return isError;
    }

    update(props: IClientsFindEntry): ClientsFindEntry {
        return new ClientsFindEntry(props);
    }

    readonly keys: { [key: string]: string } = {
        }
;

    mergeDeepWith(props: Partial<ClientsFindEntry>): ClientsFindEntry {
        const updateData: Partial<IClientsFindEntry> = {};
        Object.keys(props).forEach((key: keyof ClientsFindEntry) => {
            const updateKey = this.keys[key] as keyof IClientsFindEntry;
            if ((props[key] as any).serialize) {
                (updateData[updateKey] as any) = (props[key] as any).serialize() as Pick<IClientsFindEntry, keyof IClientsFindEntry>;
            } else {
                (updateData[updateKey] as any) = props[key];
            }
        });
        return new ClientsFindEntry({ ...this.serialize(), ...updateData });
    }
}
