// This file was autogenerated. Please do not change.
// All changes will be overwrited on commit.
export interface ILogin {
    password?: string;
    username?: string;
}

export default class Login {
    readonly _password: string | undefined;

    /** */
    get password(): string | undefined {
        return this._password;
    }

    readonly _username: string | undefined;

    /** */
    get username(): string | undefined {
        return this._username;
    }

    constructor(props: ILogin) {
        if (typeof props.password === 'string') {
            this._password = props.password.trim();
        }
        if (typeof props.username === 'string') {
            this._username = props.username.trim();
        }
    }

    serialize(): ILogin {
        const data: ILogin = {
        };
        if (typeof this._password !== 'undefined') {
            data.password = this._password;
        }
        if (typeof this._username !== 'undefined') {
            data.username = this._username;
        }
        return data;
    }

    validate(): string[] {
        const validateRequired = {
            username: !this._username ? true : typeof this._username === 'string' && !this._username ? true : this._username,
            password: !this._password ? true : typeof this._password === 'string' && !this._password ? true : this._password,
        };
        const isError: string[] = [];
        Object.keys(validateRequired).forEach((key) => {
            if (!(validateRequired as any)[key]) {
                isError.push(key);
            }
        });
        return isError;
    }

    update(props: ILogin): Login {
        return new Login(props);
    }

    readonly keys: { [key: string]: string } = {
        password: 'password',
        username: 'username',
        }
;

    mergeDeepWith(props: Partial<Login>): Login {
        const updateData: Partial<ILogin> = {};
        Object.keys(props).forEach((key: keyof Login) => {
            const updateKey = this.keys[key] as keyof ILogin;
            if ((props[key] as any).serialize) {
                (updateData[updateKey] as any) = (props[key] as any).serialize() as Pick<ILogin, keyof ILogin>;
            } else {
                (updateData[updateKey] as any) = props[key];
            }
        });
        return new Login({ ...this.serialize(), ...updateData });
    }
}
