// This file was autogenerated. Please do not change.
// All changes will be overwrited on commit.
export interface IStatsConfig {
    interval?: number;
}

export default class StatsConfig {
    readonly _interval: number | undefined;

    /** */
    get interval(): number | undefined {
        return this._interval;
    }

    constructor(props: IStatsConfig) {
        if (typeof props.interval === 'number') {
            this._interval = props.interval;
        }
    }

    serialize(): IStatsConfig {
        const data: IStatsConfig = {
        };
        if (typeof this._interval !== 'undefined') {
            data.interval = this._interval;
        }
        return data;
    }

    validate(): string[] {
        const validateRequired = {
            interval: !this._interval ? true : typeof this._interval === 'number',
        };
        const isError: string[] = [];
        Object.keys(validateRequired).forEach((key) => {
            if (!(validateRequired as any)[key]) {
                isError.push(key);
            }
        });
        return isError;
    }

    update(props: IStatsConfig): StatsConfig {
        return new StatsConfig(props);
    }

    readonly keys: { [key: string]: string } = {
        interval: 'interval',
        }
;

    mergeDeepWith(props: Partial<StatsConfig>): StatsConfig {
        const updateData: Partial<IStatsConfig> = {};
        Object.keys(props).forEach((key: keyof StatsConfig) => {
            const updateKey = this.keys[key] as keyof IStatsConfig;
            if ((props[key] as any).serialize) {
                (updateData[updateKey] as any) = (props[key] as any).serialize() as Pick<IStatsConfig, keyof IStatsConfig>;
            } else {
                (updateData[updateKey] as any) = props[key];
            }
        });
        return new StatsConfig({ ...this.serialize(), ...updateData });
    }
}
