// This file was autogenerated. Please do not change.
// All changes will be overwrited on commit.
export interface IAddressInfo {
    ip?: string;
    port?: number;
}

export default class AddressInfo {
    readonly _ip: string | undefined;

    /**
     * Description: undefined
     * Example: 127.0.0.1
     */
    get ip(): string | undefined {
        return this._ip;
    }

    readonly _port: number | undefined;

    /**
     * Description: undefined
     * Example: 53
     */
    get port(): number | undefined {
        return this._port;
    }

    constructor(props: IAddressInfo) {
        if (typeof props.ip === 'string') {
            this._ip = props.ip.trim();
        }
        if (typeof props.port === 'number') {
            this._port = props.port;
        }
    }

    serialize(): IAddressInfo {
        const data: IAddressInfo = {
        };
        if (typeof this._ip !== 'undefined') {
            data.ip = this._ip;
        }
        if (typeof this._port !== 'undefined') {
            data.port = this._port;
        }
        return data;
    }

    validate(): string[] {
        const validateRequired = {
            ip: !this._ip ? true : typeof this._ip === 'string' && !this._ip ? true : this._ip,
            port: !this._port ? true : typeof this._port === 'number',
        };
        const isError: string[] = [];
        Object.keys(validateRequired).forEach((key) => {
            if (!(validateRequired as any)[key]) {
                isError.push(key);
            }
        });
        return isError;
    }

    update(props: IAddressInfo): AddressInfo {
        return new AddressInfo(props);
    }

    readonly keys: { [key: string]: string } = {
        ip: 'ip',
        port: 'port',
        }
;

    mergeDeepWith(props: Partial<AddressInfo>): AddressInfo {
        const updateData: Partial<IAddressInfo> = {};
        Object.keys(props).forEach((key: keyof AddressInfo) => {
            const updateKey = this.keys[key] as keyof IAddressInfo;
            if ((props[key] as any).serialize) {
                (updateData[updateKey] as any) = (props[key] as any).serialize() as Pick<IAddressInfo, keyof IAddressInfo>;
            } else {
                (updateData[updateKey] as any) = props[key];
            }
        });
        return new AddressInfo({ ...this.serialize(), ...updateData });
    }
}
