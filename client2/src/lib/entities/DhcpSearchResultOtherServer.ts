// This file was autogenerated. Please do not change.
// All changes will be overwrited on commit.
export interface IDhcpSearchResultOtherServer {
    error?: string;
    found?: string;
}

export default class DhcpSearchResultOtherServer {
    readonly _error: string | undefined;

    /** */
    get error(): string | undefined {
        return this._error;
    }

    readonly _found: string | undefined;

    /**
     * Description: yes|no|error
     * Example: no
     */
    get found(): string | undefined {
        return this._found;
    }

    constructor(props: IDhcpSearchResultOtherServer) {
        if (typeof props.error === 'string') {
            this._error = props.error.trim();
        }
        if (typeof props.found === 'string') {
            this._found = props.found.trim();
        }
    }

    serialize(): IDhcpSearchResultOtherServer {
        const data: IDhcpSearchResultOtherServer = {
        };
        if (typeof this._error !== 'undefined') {
            data.error = this._error;
        }
        if (typeof this._found !== 'undefined') {
            data.found = this._found;
        }
        return data;
    }

    validate(): string[] {
        const validateRequired = {
            found: !this._found ? true : typeof this._found === 'string' && !this._found ? true : this._found,
            error: !this._error ? true : typeof this._error === 'string' && !this._error ? true : this._error,
        };
        const isError: string[] = [];
        Object.keys(validateRequired).forEach((key) => {
            if (!(validateRequired as any)[key]) {
                isError.push(key);
            }
        });
        return isError;
    }

    update(props: IDhcpSearchResultOtherServer): DhcpSearchResultOtherServer {
        return new DhcpSearchResultOtherServer(props);
    }

    readonly keys: { [key: string]: string } = {
        error: 'error',
        found: 'found',
        }
;

    mergeDeepWith(props: Partial<DhcpSearchResultOtherServer>): DhcpSearchResultOtherServer {
        const updateData: Partial<IDhcpSearchResultOtherServer> = {};
        Object.keys(props).forEach((key: keyof DhcpSearchResultOtherServer) => {
            const updateKey = this.keys[key] as keyof IDhcpSearchResultOtherServer;
            if ((props[key] as any).serialize) {
                (updateData[updateKey] as any) = (props[key] as any).serialize() as Pick<IDhcpSearchResultOtherServer, keyof IDhcpSearchResultOtherServer>;
            } else {
                (updateData[updateKey] as any) = props[key];
            }
        });
        return new DhcpSearchResultOtherServer({ ...this.serialize(), ...updateData });
    }
}
